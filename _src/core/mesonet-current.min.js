/*
mesonet-0.7.9.js
(C) 2016 MesoWest/SynopticLabs. All rights reserved.
*/
var Mesonet=function(){"use strict";function a(a){this.response={station:[],summary:{},tableOfContents:{},sensor:{stack:[],metadata:{},units:{}},qc:{flags:{},stack:[],active:[],metadata:{}}},this.config={fetch:{service:"TimeSeries",api_token:"not-set",getVariableMetadata:!0,getQcMetadata:!0,getNetworkMetadata:!1}},this.config.fetch.api_token=a.token,this.config.fetch.service=a.service,this.urlArgs=this._urlArgs()}var b={};return a.prototype._urlArgs=function(){var a,b={},c=window.location.search.substring(1).split("&"),d=c.length;if(1===window.location.search.substring(1).split("="))return"undefined";for(var e=0;e<d;e++)a=c[e].split("="),"undefined"==typeof b[a[0]]&&(b[a[0]]=decodeURIComponent(a[1]));return b},a.prototype._getKeys=function(a){var b=[];for(var c in a)b.push(c);return b},a.prototype.windowArgs=function(){return this.urlArgs},a.prototype.printResponse=function(){var a=this;return $.when(b).done(function(){console.log("#nxmao - Mesonet API response."),console.log(a.response)}),0},a.prototype.async=function(){return $.when(b).done(),b},a.prototype.setApiToken=function(a){return this.config.fetch.api_token=a,!0},a.prototype.setService=function(a){try{this.config.fetch.service=a}catch(a){return console.log("#a2q48 - Failed to set API service."),!1}return!0},a.prototype._sortUnique=function(a){if(0===a.length)return a;a=a.sort(function(a,b){return 1*a-1*b});for(var b=[a[0]],c=1;c<a.length;c++)a[c-1]!==a[c]&&b.push(a[c]);return b},a.prototype.epochDate=function(a){return"[object Date]"===Object.prototype.toString.call(a)?Math.round(new Date(a).getTime()/1e3):"number"==typeof a?new Date(1e3*a):Math.round(new Date(a).getTime()/1e3)},a.prototype.apiDateToEpoch=function(a,b){var c="";if("undefined"==typeof b&&(b=!1),"undefined"==typeof a)return!1;"number"==typeof a&&(c=a.toString());var d=new Date(0);return d.setUTCFullYear(Number(c.slice(0,4))),d.setUTCMonth(Number(c.slice(4,6))-1),d.setUTCDate(Number(c.slice(6,8))),b&&(d.setUTCHours(Number(c.slice(8,10))),d.setUTCMinutes(Number(c.slice(10,12))),d.setUTCSeconds(0)),this.epochDate(d)},a.prototype.epochToApi=function(a){var b="number"==typeof a?this.epochDate(a).toJSON():Number(this.epochDate(a)).toJSON();return b.split(".")[0].replace(/[:T-]/g,"").slice(0,12)},a.prototype._parseTime=function(a){var b=a.split("|"),c=[3];c[0]="-"===b[1].slice(0,1)?-1:1,c[1]=3600*Number(b[1].slice(1,3)),c[2]=60*Number(b[1].slice(3,5));var d=b===-1?null:Number(b[0])-c[0]*(c[1]+c[2]);return d},a.prototype._has=function(a,b){if("undefined"==typeof b)return!1;var c=0,d=b.length;for(c=0;c<d;c++)if(b[c]===a)return!0;return!1},a.prototype.fetch=function(a){if(a="undefined"==typeof a?{}:a,a.diagnostic="undefined"!=typeof a.diagnostic&&a.diagnostic,"undefined"==typeof this.config.fetch.service&&"undefined"==typeof a.service)return console.log("#uil4z - No Mesonet web service set."),!1;a.service="undefined"==typeof a.service?this.config.fetch.service:a.service;var c;if("undefined"==typeof a.api_args){var d=this.urlArgs;a.api_args={};for(c in d)a.api_args[c]=d[c]}return"undefined"==typeof this.config.fetch.api_token&&"undefined"==typeof a.api_args.token?(console.log("#6sgcf - No Mesonet API token set."),!1):(a.api_args.token="undefined"==typeof a.api_args.token?this.config.fetch.api_token:a.api_args.token,b=this._apiBrokerAsyncManager(a),$.when(b).done(),b)},a.prototype._apiBrokerAsyncManager=function(a){function b(){var a=$.Deferred();return a.resolve(),a.promise()}function c(a){function b(a,b){a.diagnostic===!0&&(console.log(" #2yib4 - Response parser arguments: "),console.log(a));var c=e.response,d=0,f=0,i=0,j=[],k="";if(1!==b.SUMMARY.RESPONSE_CODE)return console.log("#oggi1 - Error code issued from Mesonet API."),console.log(b.SUMMARY.RESPONSE_MESSAGE),c.summary=b.SUMMARY,!1;if("QcTypes"===a.web_service)for(f=b.QCTYPES.length,d=0;d<f;d++)c.qc.metadata[Number(b.QCTYPES[d].ID)]=b.QCTYPES[d];else if("Variables"===a.web_service)for(c.sensor.metadata.rank=[],c.sensor.metadata.meta={},c.sensor.metadata.meta_vid={},f=b.VARIABLES.length,d=0;d<f;d++)c.sensor.metadata.rank[d]=e._getKeys(b.VARIABLES[d])[0],c.sensor.metadata.meta[e._getKeys(b.VARIABLES[d])]=b.VARIABLES[d][e._getKeys(b.VARIABLES[d])],c.sensor.metadata.meta_vid[b.VARIABLES[d][e._getKeys(b.VARIABLES[d])].vid]=b.VARIABLES[d][e._getKeys(b.VARIABLES[d])];else if("Networks"===a.web_service)for("undefined"==typeof c.network&&(c.network={}),c.network.networks={},f=b.MNET.length,d=0;d<f;d++)c.network.networks[Number(b.MNET[d].ID)]=b.MNET[d];else if("NetworkTypes"===a.web_service)for("undefined"==typeof c.network&&(c.network={}),c.network.types={},f=b.MNETCAT.length,d=0;d<f;d++)c.network.types[Number(b.MNETCAT[d].ID)]=b.MNETCAT[d];else if("QcSegments"===a.web_service){delete c.sensor.units,delete c.sensor.stack,delete c.qc.active,delete c.qc.flags,delete c.qc.stack,c.summary=b.SUMMARY,c.qc.local={},c.qc.local.source_name=b.QC_SOURCENAMES,c.qc.local.api_name=b.QC_SHORTNAMES,c.qc.local.flag_name=b.QC_NAMES;for(f=b.STATION.length;d<f;)c.tableOfContents[b.STATION[d].STID]=d,c.station[d]=b.STATION[d],d++}else if("Metadata"===a.web_service){for(delete c.qc,delete c.sensor.units,f=b.STATION.length,d=0;d<f;d++)c.station[d]=b.STATION[d],c.tableOfContents[b.STATION[d].STID]=d;c.summary=b.SUMMARY}else if("TimeSeries"===a.web_service||"Latest"===a.web_service)for(c.summary=b.SUMMARY,c.qc.active.push(!1),f=b.STATION.length,d=0;d<f;d++){c.sensor.stack[d]=[];for(k in b.STATION[d].SENSOR_VARIABLES)for(j=Object.keys(b.STATION[d].SENSOR_VARIABLES[k]).sort(),i=0;i<j.length;i++)c.sensor.stack[d].push(j[i]);if(c.qc.active[d]=b.STATION[d].QC_FLAGGED,c.station[d]=b.STATION[d],c.sensor.units[d]=b.UNITS,c.tableOfContents[b.STATION[d].STID]=d,"undefined"!=typeof b.UIMODE){c.ui=b.UIMODE,c.ui.toc={},c.ui.build={_o:[],_d:[],_n:[],_r:[]};for(var l=0,m=c.ui.sensors.length,n=0,o=0,p=[];l<m;){if(c.ui.toc[c.ui.sensors[l].apiname]=l,c.ui.build._r.push(c.ui.sensors[l].apiname),"undefined"!=typeof c.station[d].SENSOR_VARIABLES[c.ui.sensors[l].apiname])for(p=Object.keys(c.station[d].SENSOR_VARIABLES[c.ui.sensors[l].apiname]).sort(),n=0,o=p.length;n<o;)c.ui.build._o.push(p[n]),c.ui.build._d.push(!(!c.ui.sensors[l].default||n>0)),c.ui.build._n.push(c.ui.sensors[l].apiname),n++;l++}}c.qc.active[d]&&(c.qc.stack[d]=e._getKeys(b.STATION[d].QC),c.qc.flags[d]=b.STATION[d].QC)}else{if("Statistics"!==a.web_service)return console.log("#34wjt - Unsupported Mesonet service."),!1;for(delete c.qc,delete c.sensor.metadata,c.summary=b.SUMMARY,f=b.STATION.length,d=0;d<f;d++){c.sensor.stack[d]=[];for(k in b.STATION[d].SENSOR_VARIABLES)for(j=Object.keys(b.STATION[d].SENSOR_VARIABLES[k]).sort(),i=0;i<j.length;i++)c.sensor.stack[d].push(j[i]);c.station[d]=b.STATION[d],c.sensor.units[d]=b.UNITS,c.tableOfContents[b.STATION[d].STID]=d}}a.diagnostic===!0&&(h=performance.now(),console.log("#xk6zr - apiBrokerEngine.haveResponse time: "+(h-g)+" ms"))}var c=$.Deferred();a.diagnostic===!0&&(f=performance.now());try{$.ajax({url:a.base_url+a.web_service_url,type:"GET",dataType:"JSON",data:a.api_args,beforeSend:function(){a.diagnostic===!0&&console.log("#dextb - Mesonet API request started.")},complete:function(d){c.notify(this.url),a.diagnostic===!0&&(g=performance.now(),console.log("#mbgyx - apiBrokerEngine.ajaxCall time: "+(g-f)+" ms."),console.log(this.url));try{d=d.responseJSON}catch(a){console.log("#9ds8t - Failed to convert response to JSON.")}a.diagnostic&&1!==d.SUMMARY.RESPONSE_CODE&&(console.log("#vu0s5 - Error code issued from Mesonet API."),console.log(d.SUMMARY.RESPONSE_MESSAGE),console.log(this.url)),b(a,d),c.resolve()},fail:function(){return console.log("#5gigu - Fatal Ajax error. "),console.log(this.url),console.log(this.fail),c.promise()}})}catch(a){console.log("#gl2fx - Failed to connect to Mesonet API."),console.log(this.url)}return c.promise()}var d=$.Deferred(),e=this;if("undefined"==typeof a)return console.log("#u6jpy - No arguments passed."),d.resolve(),d.promise();if(a.diagnostic===!0)var f,g,h;var i,j,k,l,m,n={diagnostic:a.diagnostic,web_service:a.service,api_args:a.api_args};if(void 0!==this.urlArgs.dev?(n.base_url="http://dev2.mesowest.net:"+this.urlArgs.dev+"/",console.log("#uym79 - "+n.web_service+" -> Dev Port: "+this.urlArgs.dev)):n.base_url="http://api.mesowest.net/v2/","TimeSeries"===a.service)n.web_service_url="stations/timeseries?callback=?";else if("Latest"===a.service)n.web_service_url="stations/latest?callback=?";else if("Metadata"===a.service)n.web_service_url="stations/metadata?callback=?",this.config.fetch.qcTypes=!1;else if("QcSegments"===a.service)n.web_service_url="qcsegments?callback=?";else{if("Statistics"!==a.service)return!1;n.web_service_url="stations/statistics?callback=?"}return i=c(n),a.diagnostic===!0&&(console.log("#8bd2v - Diagnostic: Webservice arguments."),console.log(n)),j=this.config.fetch.getQcMetadata?c({web_service:"QcTypes",base_url:n.base_url,web_service_url:"qctypes?callback=?",api_args:a.api_args}):b(),k=this.config.fetch.getVariableMetadata?c({web_service:"Variables",base_url:n.base_url,web_service_url:"variables?callback=?",api_args:a.api_args}):b(),this.config.fetch.getNetworkMetadata?(l=c({web_service:"Networks",base_url:n.base_url,web_service_url:"networks?callback=?",api_args:a.api_args}),m=c({web_service:"NetworkTypes",base_url:n.base_url,web_service_url:"networktypes?callback=?",api_args:a.api_args})):(l=b(),m=b()),$.when(i,j,k,l,m).done(function(){d.resolve()}),d.promise()},a}();